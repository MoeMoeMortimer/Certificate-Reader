
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.Icon;
import javax.swing.JLabel;
import java.security.*;
import java.io.*;
import java.util.*;
import java.awt.*; 
import javax.swing.table.DefaultTableModel;  
import javax.swing.table.TableCellRenderer;  
import javax.swing.ImageIcon;
import java.security.cert.*;
import java.security.cert.CertificateFactory;
import java.text.SimpleDateFormat;
import javax.swing.JTable;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERIA5String;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.x509.AccessDescription;
import org.bouncycastle.asn1.x509.AuthorityInformationAccess;
import org.bouncycastle.asn1.x509.AuthorityKeyIdentifier;
import org.bouncycastle.asn1.x509.BasicConstraints;
import org.bouncycastle.asn1.x509.CRLDistPoint;
import org.bouncycastle.asn1.x509.DistributionPoint;
import org.bouncycastle.asn1.x509.DistributionPointName;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.X509Extensions;
import org.bouncycastle.x509.extension.X509ExtensionUtil;
import org.bouncycastle.asn1.x509.SubjectKeyIdentifier;
import org.bouncycastle.jce.PrincipalUtil;
import org.bouncycastle.jce.X509Principal;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *证书解析工具
 * @author  刘艺语 刘渊晨 梁雨婷 
 */
public class MiniCAFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form MiniCAFrame
     */
    private Object [][] data1;//存储所有属性
    private Object [] data2;//储存颁发者、使用者、公钥的详细信息
    
    final static int numOfAttri = 20;//<所有>属性个数
    final static int numOfAttri1 = 10;//版本1字段属性个数
    final static int numOfAttri_key = 17; //基本约束所在数组位置

    public MiniCAFrame() {
        this.data2 = new Object[3];
        this.data1 = new Object[numOfAttri][2];
        initComponents();
    }
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        show = new javax.swing.JLabel();
        jComboBox_type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_info = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jText_detailedInfo = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButton_chooseCA = new javax.swing.JButton();
        jTextField_CApath = new javax.swing.JTextField();
        jButton_exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("证书查看");
        setBounds(new java.awt.Rectangle(700, 160, 587, 818));
        setMaximumSize(new java.awt.Dimension(587, 818));
        setMinimumSize(new java.awt.Dimension(587, 818));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "详细信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 18))); // NOI18N

        show.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        show.setText("显示(s):");

        jComboBox_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<所有>", "只有版本1字段", "只有扩展", "只有关键扩展", "只有属性" }));
        jComboBox_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_typeActionPerformed(evt);
            }
        });

        jTable_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "字段", "值", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_info.setToolTipText("");
        jTable_info.setRowHeight(26);
        jTable_info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_infoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_info);

        jText_detailedInfo.setEditable(false);
        jText_detailedInfo.setColumns(20);
        jText_detailedInfo.setLineWrap(true);
        jText_detailedInfo.setRows(5);
        jText_detailedInfo.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jText_detailedInfo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(show)
                .addGap(24, 24, 24)
                .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show)
                    .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton_chooseCA.setText("选择证书");
        jButton_chooseCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_chooseCAActionPerformed(evt);
            }
        });

        jTextField_CApath.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jTextField_CApath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_chooseCA)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_CApath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_chooseCA))
                .addContainerGap())
        );

        jButton_exit.setText("确定");
        jButton_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButton_exit)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton_chooseCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_chooseCAActionPerformed
    //弹出浏览文件窗口 选择需要查看的证书 选中文件后在文本字段显示绝对路径
        JFileChooser fd = new JFileChooser();
        fd.showOpenDialog(null);
        File f = null;//用户选择的文件
        f = fd.getSelectedFile();
        if(f != null && ( f.getPath().substring(f.getPath().lastIndexOf(".")).equals(".cer")||f.getPath().substring(f.getPath().lastIndexOf(".")).equals(".Cer") )){//如果文件是证书格式
             //先清空表格
            clearTable();
            //再清空数组
            for(int i=0; i<numOfAttri; i++){
                 data1[i][1] = null;
                 data1[i][0] = null;
            }
             
            jTextField_CApath.setText(f.getPath());//将文件路径写入文本框
            getAllOfAttributes(f);//将证书的所有信息存入data数组中 
            //jComboBox_type.set
            showAll();//并在表格中显示该证书所有属性
            jTable_info.getColumnModel().getColumn(0).setCellRenderer(new JTableCellRender1());//通过带有图片和文字的标签表示表格第一列的单元格
            jTable_info.setBackground(new java.awt.Color(255, 255, 255));//设置表格背景色为白色
        }
        else if(f == null);//如果没有选中文件
        else//如果不是证书类型的文件弹出提示框 
            JOptionPane.showMessageDialog(null,  "请选择证书类型文件！", "错误提示",JOptionPane.ERROR_MESSAGE); 
    }//GEN-LAST:event_jButton_chooseCAActionPerformed

    private void showAll(){//显示<所有>属性
        
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        if(!(data1 == null))
            for(int i=0; i<numOfAttri; i++)
                if(data1[i][1] != null && !data1[i][1].equals(""))
                    table.addRow(data1[i]);
 
    }
    private void show1(){//显示只有版本1字段
        
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        if(!(data1 == null))
            for(int i=0; i<numOfAttri1; i++)
                if(data1[i][1] != null && !data1[i][1].equals(""))
                    table.addRow(data1[i]);
    }
    
    private void show_extend(){//显示只有扩展
        
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        if(!(data1 == null))
            for(int i=numOfAttri1; i<=numOfAttri_key; i++)
                if(data1[i][1] != null && !data1[i][1].equals(""))
                    table.addRow(data1[i]);
    }
    
    private void show_key(){//显示只有关键扩展
        
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        if(!(data1 == null))
            if((data1[numOfAttri_key][1] != null) && !data1[numOfAttri_key][1].equals(""))
                table.addRow(data1[numOfAttri_key]);
    }
    private void show_attribute(){//显示只有属性
        
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        if(!(data1 == null))
             for(int i=numOfAttri_key+1; i<numOfAttri; i++)
                if(data1[i][1] != null && !data1[i][1].equals(""))
                    table.addRow(data1[i]);
    }

    private void getAllOfAttributes(File f){//将证书的所有信息存入data数组中
        try{
                X509Certificate x509Certificate = null; 
                CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
                FileInputStream fileInputStream = new FileInputStream(f.getPath());  
                x509Certificate = (X509Certificate) certificateFactory.generateCertificate(fileInputStream);  
                fileInputStream.close();  
               
                String filePath1 = "D:\\projects\\cipher\\small_term\\small_term\\src\\imgs_icons\\icon2.png";
                String filePath2 = "D:\\projects\\cipher\\small_term\\small_term\\src\\imgs_icons\\icon1.png";
                String filePath3 = "D:\\projects\\cipher\\small_term\\small_term\\src\\imgs_icons\\icon4.png";
                String filePath4 = "D:\\projects\\cipher\\small_term\\small_term\\src\\imgs_icons\\icon3.png";
                Icon icon1 = new ImageIcon(filePath1); //只有版本字段1的图标
                Icon icon2 = new ImageIcon(filePath2); //扩展的图标
                Icon icon3 = new ImageIcon(filePath3); //关键的图标
                Icon icon4 = new ImageIcon(filePath4); //属性的图标
                JLabel[] label=new JLabel [numOfAttri];//用于存储表格第一列的图标和字段文本
                
                for(int i=0; i<numOfAttri1; i++)
                    label[i] = new JLabel("",icon1, JLabel.LEFT);
                for(int i=numOfAttri1; i<numOfAttri_key; i++)
                    label[i] = new JLabel("",icon2, JLabel.LEFT);
                
                label[numOfAttri_key] = new JLabel("基本约束",icon3, JLabel.LEFT);
                
                
                 for(int i=numOfAttri_key+1; i<numOfAttri; i++)
                    label[i] = new JLabel("",icon4, JLabel.LEFT);
                 
                label[0].setText("版本");
                data1[0][0] = label[0];
                data1[0][1] = "V"+x509Certificate.getVersion();
   
                label[1].setText("序列号");
                data1[1][0] =label[1];
                data1[1][1] = "0"+x509Certificate.getSerialNumber();
                
                label[2].setText("签名算法");
                data1[2][0] = label[2];
                data1[2][1] = x509Certificate.getSigAlgName();
                
                label[3].setText("签名哈希算法");
                data1[3][0] = label[3];
                data1[3][1] = data1[2][1].toString().substring(0,data1[2][1].toString().indexOf("with"));
                
                
                //颁发者的详细信息比第二列更详细
                label[4].setText("颁发者");
                data1[4][0] = label[4];
                data1[4][1] = getIssuerNames(x509Certificate);
                data2[0] = x509Certificate.getIssuerX500Principal().toString().replace(",", "\n");
               
                label[5].setText("有效期从");
                data1[5][0] = label[5];
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
                data1[5][1] = formatter.format(x509Certificate.getNotBefore());
                
  
                label[6].setText("到");
                data1[6][0] = label[6];
                data1[6][1] = formatter.format(x509Certificate.getNotAfter());
                        ;
                
                
                //同颁发者
                label[7].setText("使用者");
                data1[7][0] =  label[7];
                data1[7][1] = getPrincipalNames(x509Certificate);  
                data2[1]= x509Certificate.getSubjectX500Principal().toString().replace(",", "\n");
                
                //同上
                /****************************刘渊晨***************************/
                label[8].setText("公钥");
                data1[8][0] = label[8];
                String s1 = x509Certificate.getPublicKey().toString();                
                data1[8][1] = s1.substring(4,7)+"("+s1.substring(s1.lastIndexOf(",")+2,s1.indexOf("\n"))+")";
                data2[2] = byte2hex(x509Certificate.getPublicKey().getEncoded());
       
                label[9].setText("公钥参数");
                data1[9][0]= label[9];
                data1[9][1]= "05 00";
     
                    label[10].setText( "使用者密钥标识符");
                    data1[10][0] = label[10];
                    data1[10][1] = getSubjectKeyIdentifier(x509Certificate);                   
                    
                    label[11].setText( "授权密钥标识符");
                    data1[11][0] =  label[11];
                    data1[11][1] = getAuthorityKeyIdentifier(x509Certificate);
                    
                    label[12].setText("使用者可选名称");
                    data1[12][0] =  label[12];
                    data1[12][1] = getSubjectAlterNames(x509Certificate);
                    
                    label[13].setText( "颁发者备用名称");
                    data1[13][0] =  label[13];
                    data1[13][1] = getIssuerAlternativeNames(x509Certificate);
                    
                    label[14].setText( "授权信息访问");
                    data1[14][0] =  label[14];
                    data1[14][1] = getAuthorityInformationAccess(x509Certificate);
                   
                    label[15].setText( "CRL分发点");
                    data1[15][0] =  label[15];
                    data1[15][1] = getCrlDistributionPoints(x509Certificate);
                   
                    label[16].setText( "策略限制");
                    data1[16][0] =  label[16];
                    data1[16][1] = getPolicyConstraints(x509Certificate);

                
               /*********************************基本约束----刘渊晨********************/
                    if(x509Certificate.getBasicConstraints() != -1){
                        data1[17][0] =  label[numOfAttri_key];
                        data1[17][1] = "Subject Type=CA\nPath Length Constraint="+x509Certificate.getBasicConstraints();
                    }
                /*******************************************************/
                label[18].setText("指纹算法");
                data1[18][0] = label[18];
                data1[18][1] = "sha1";
                
                label[19].setText("指纹");
                data1[19][0] = label[19];
                data1[19][1] = getThumbPrint(x509Certificate);
   
            }catch(Exception exception){
                exception.printStackTrace();
            }
    }
    private void jTable_infoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_infoMouseClicked
        // TODO add your handling code here:
        //鼠标点击显示完整信息
        jText_detailedInfo.setText("");
        if(jTable_info.getValueAt(jTable_info.getSelectedRow(),0)!=null)
        {
            String s =((JLabel)jTable_info.getValueAt(jTable_info.getSelectedRow(), 0)).getText(); //获取所选中的行的第一列的文本内容
            if (s.equals("颁发者")) 
                jText_detailedInfo.setText(data2[0].toString());
            else if(s.equals("使用者"))
                jText_detailedInfo.setText(data2[1].toString());
            else if(s.equals("公钥"))  
                jText_detailedInfo.setText(data2[2].toString());
            else{
                String s1 = jTable_info.getValueAt(jTable_info.getSelectedRow(), 1).toString();
                jText_detailedInfo.setText(s1);

            }      
        }
    }//GEN-LAST:event_jTable_infoMouseClicked

    private void jButton_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exitActionPerformed
        // TODO add your handling code here:
        //点击“确定”按钮，退出程序
        System.exit(0);
    }//GEN-LAST:event_jButton_exitActionPerformed

    
    private void clearTable(){
        DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();
        table.getDataVector().clear();   //清除表格数据
        table.fireTableDataChanged();//通知模型更新
        jTable_info.updateUI();//刷新表格
    }
    private void jComboBox_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_typeActionPerformed
        // TODO add your handling code here:
        //判断选取复选框中的类型,并显示对应的信息
        //DefaultTableModel table = (DefaultTableModel) jTable_info.getModel();

        //先清空表格
       clearTable();
        
        //清空文本区域
        jText_detailedInfo.setText("");
        
        if(jComboBox_type.getSelectedItem().toString().equals("<所有>")){
            showAll();
        }
        else if(jComboBox_type.getSelectedItem().toString().equals("只有版本1字段")){
            show1();
        }
        else if(jComboBox_type.getSelectedItem().toString().equals("只有扩展"))
            show_extend();
        else if(jComboBox_type.getSelectedItem().toString().equals("只有关键扩展"))
            show_key();
        else if(jComboBox_type.getSelectedItem().toString().equals("只有属性"))
            show_attribute();
    }//GEN-LAST:event_jComboBox_typeActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniCAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniCAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniCAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniCAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame MiniCAFrame = new MiniCAFrame();
                /************刘渊晨****************/
                MiniCAFrame.setVisible(true);
                MiniCAFrame.setResizable(false);
            }
        });
    }
    
/*******************刘艺语***************************/
    //转16进制
    private static String byte2hex(byte [] buffer){  
       String h = "";  
       /******************梁雨婷增加if(buffer != null) **************/
       if(buffer != null)
       for(int i = 0; i < buffer.length  ; i++){  
           String temp = Integer.toHexString(buffer[i] & 0xFF);  
           if(temp.length() == 1){  
               temp = "0" + temp;  
           }  
           h = h + " "+ temp;  
       }  
       return h;     
   }
    //得到指纹属性
    public static String getThumbPrint(X509Certificate cert) throws NoSuchAlgorithmException, CertificateEncodingException {
	MessageDigest md = MessageDigest.getInstance("SHA-1");
	byte[] der = cert.getEncoded();
	md.update(der);
	byte[] digest = md.digest();
	return byte2hex(digest);
   }
    /*****颁发者备用名称*****/
    public static String getIssuerAlternativeNames(X509Certificate cert) throws CertificateException {
    	Collection<java.util.List<?>>  lst = cert.getIssuerAlternativeNames();
    	String res = "";
        /****************梁雨婷增if(lst != null)***************/
        if(lst != null)
    	for(java.util.List<?> item : lst){
    		int id = (Integer) item.get(0);
    		res += getTypeById(id);
    		res += (String) item.get(1);
    		res += '\n';
    	}
    	return res;
    }
    
    
    /*******使用者可选名称******/
    public static String getSubjectAlterNames(X509Certificate cert) throws CertificateParsingException{
    	Collection<java.util.List<?>>  lst = cert.getSubjectAlternativeNames();
    	String res = null;
        /****************梁雨婷增if(lst != null)***************/
        if(lst != null)
    	for(java.util.List<?> item : lst){
    		res += (String) item.get(1);
    		res += '\n';
    	}
    	return res;

   }
    
    /********授权信息访问*******/
    public static String getAuthorityInformationAccess(X509Certificate certificate) {
        String url = "";
    	byte[] octetBytes = certificate.getExtensionValue(org.bouncycastle.asn1.x509.Extension.authorityInfoAccess.getId());
        int i = 1;
        if (null != octetBytes) {
            try {
                byte[] encoded = X509ExtensionUtil.fromExtensionValue(octetBytes).getEncoded();
                ASN1Sequence seq = ASN1Sequence.getInstance(ASN1Primitive.fromByteArray(encoded));
                AuthorityInformationAccess access = AuthorityInformationAccess.getInstance(seq);
                AccessDescription[] accessDescription = access.getAccessDescriptions();
                for (AccessDescription info : accessDescription){
                	//System.out.println(info.getAccessMethod().toString());
//                        [1]Authority Info Access
//     Access Method=联机证书状态协议 (1.3.6.1.5.5.7.48.1)
//     Alternative Name:
//          URL=https://hpxs

                        url += "["+ i +"]"+"Authority Info Access\n     Access Method=联机证书状态协议 (";
                        url += info.getAccessMethod().toString()+")\n     Alternative Name:\n          URL=https:";
                   //System.out.println(info.getAccessLocation().getName().toString());
                   url += info.getAccessLocation().getName().toString();
                   url += '\n';                }                
            } catch (IOException ignore) {
            }
        }
        return url;
    }
    
    /******基本约束   *****/
    public static String getBasicConstraints(X509Certificate cert) throws CertPathValidatorException, IOException {
        String s = "";      
    	BasicConstraints bc = null;
    	byte[] octetBytes = cert.getExtensionValue(org.bouncycastle.asn1.x509.Extension.basicConstraints.getId());
    	byte[] encoded = X509ExtensionUtil.fromExtensionValue(octetBytes).getEncoded();
        ASN1Sequence seq = ASN1Sequence.getInstance(ASN1Primitive.fromByteArray(encoded));
        bc = BasicConstraints.getInstance(seq);
        
        if (bc != null)
        {
            if (!(bc.isCA()));
            	//System.out.println("Not a CA certificate");
                //s += "Not a CA certificate";
            else{
            	//System.out.println("Subject Type=CA");
                s += "Subject Type=CA\n";
            	//System.out.println("Path Length Constraint="+bc.getPathLenConstraint());
                s += "Path Length Constraint="+bc.getPathLenConstraint();
            }
        }
        else
        {
            throw new CertPathValidatorException("Intermediate certificate lacks BasicConstraints");
        }
        return s;
    }
     
    
    /**** 策略限制 ****/
    public static String getPolicyConstraints(X509Certificate cert) throws IOException {
        
    	byte[] CP = cert.getExtensionValue(org.bouncycastle.asn1.x509.Extension.policyConstraints.getId());
		if (CP == null) {
			//System.out.println(12313);
			return null;
		}
		byte[] encoded = X509ExtensionUtil.fromExtensionValue(CP).getEncoded();
        ASN1Sequence seq = ASN1Sequence.getInstance(ASN1Primitive.fromByteArray(encoded));
        String s = seq.getObjectAt(0).toString();
       // System.out.println(s);
       String policy = "";
        if(s.charAt(1)=='0'){
        	//System.out.println("Required Explicit Policy Skip Certs="+s.charAt(5));
                policy += "Required Explicit Policy Skip Certs="+s.charAt(5);
        }else {
        	//System.out.println("Duplicate requireExplicitPolicy");
                policy += "Duplicate requireExplicitPolicy";
        }
		return policy;
	} 
    
    /******授权密钥标识符******/
    public static String getAuthorityKeyIdentifier(X509Certificate cert) throws CertificateException {
    	byte[] res = null;
    	String akid = "";
    	byte[] extval = cert.getExtensionValue(org.bouncycastle.asn1.x509.Extension.authorityKeyIdentifier.getId());
    	ASN1OctetString akiOc = ASN1OctetString.getInstance(extval);
    	if (extval != null) {
			AuthorityKeyIdentifier aki = AuthorityKeyIdentifier.getInstance(akiOc.getOctets());
			AuthorityKeyIdentifier keyId = new AuthorityKeyIdentifier(extval);
			res = keyId.getKeyIdentifier();
			akid = byte2hex(res);
	    	akid += "\nCertificate Issuer:\n"
	    			+ "Directory Address:\n ";
	    	GeneralName[] issuer = aki.getAuthorityCertIssuer().getNames();
	    	for(GeneralName name : issuer){
	    		akid += name.toString();
	    		akid += '\n';
	    	}
	    	
	    	String serialnum = aki.getAuthorityCertSerialNumber().toString();
	    	
	    	akid += "Certificate SerialNumber="+serialnum;
			
		}
    	return akid;
    }

/**********使用者密钥标识符******/
    public static String getSubjectKeyIdentifier(X509Certificate certificate) throws CertificateException {
    	byte[] result = null;
    	byte[] extvalue = certificate.getExtensionValue(X509Extensions.SubjectKeyIdentifier.getId());
		if (extvalue != null) {
			SubjectKeyIdentifier keyId = new SubjectKeyIdentifier(extvalue);
			result = keyId.getKeyIdentifier();
		}
    	return byte2hex(result);
    }

     public static String getTypeById(int id) {
	   
	   /**
	    *  GeneralName ::= CHOICE {
	    *  Other Name                       [0]     OtherName,
	    *  RFC822 Name                      [1]     IA5String,
	    *  DNS Name                         [2]     IA5String,
	    *  X400 Address                     [3]     ORAddress,
	    *  Directory Name                   [4]     Name,
	    *  EdiPartyName                     [5]     EDIPartyName,
	    *  URL                              [6]     IA5String,
	    *  IP Address                       [7]     OCTET STRING,
	    *  Registered ID                    [8]     OBJECT IDENTIFIER}
	    */
   	   String type = null;
	   if(id==0){
		   type = "Other Name = ";
	   }
	   if(id==1){
		   type = "RFC822 Name = ";
	   }
	   if(id==2){
		   type = "DNS Name = "; 
	   }
	   if(id==3){
		   type = "X400 Address = ";
	   }
	   if(id==4){
		   type = "Directory Name = ";
	   }
	   if(id==5){
		   type = "EdiPartyName = ";
	   }
	   if(id==6){
		   type = "URL = ";
	   }
	   if(id==7){
		   type = "IP Address = ";
	   }
	   if(id==8){
		   type = "Registered ID = ";
	   }
	   return type;
  }

//CRL分发点
   public static String getCrlDistributionPoints(
			X509Certificate cert) throws CertificateParsingException, IOException {
		byte[] crldpExt = cert.getExtensionValue(
				X509Extensions.CRLDistributionPoints.getId());
                /***************************梁雨婷增if(crldpExt != null)*****************/
                ArrayList<String> crlUrls = new ArrayList<String>();
                if(crldpExt != null){
		ASN1InputStream oAsnInStream = new ASN1InputStream(
				new ByteArrayInputStream(crldpExt));
		
		ASN1Primitive derObjCrlDP = oAsnInStream.readObject();
		DEROctetString dosCrlDP = (DEROctetString) derObjCrlDP;
		byte[] crldpExtOctets = dosCrlDP.getOctets();
		
		ASN1InputStream oAsnInStream2 = new ASN1InputStream(
				new ByteArrayInputStream(crldpExtOctets));
		
		ASN1Primitive derObj2 = oAsnInStream2.readObject();
		CRLDistPoint distPoint = CRLDistPoint.getInstance(derObj2);
		
		for (DistributionPoint dp : distPoint.getDistributionPoints()) {
			//System.out.println(dp);
	           DistributionPointName dpn = dp.getDistributionPoint();
	           // Look for URIs in fullName
	           if (dpn != null) {
	               if (dpn.getType() == DistributionPointName.FULL_NAME) {
	                   GeneralName[] genNames = GeneralNames.getInstance(
	                       dpn.getName()).getNames();
	                   // Look for an URI
	                   for (int j = 0; j < genNames.length; j++) {
	                       if (genNames[j].getTagNo() == GeneralName.uniformResourceIdentifier) {
	                           String url = DERIA5String.getInstance(
	                               genNames[j].getName()).getString();
	                           crlUrls.add(url);
	                       }
	                   }
	               }
	           }
		}
   }
                String s = "";
                int i = 1;
                for(String n:crlUrls){
                    s += "["+i+"]"+"CRL Distribution Point\n     Distribution Point Name:\n          Full Name:\n               ";
                    s += "URL = "+ n +"\n";
                    i++;
                }   
                    
		return s;
}
/*****使用者（没有等号的）*****/
    public static String getPrincipalNames(X509Certificate cert) throws CertificateException {
    	X509Principal x509Principal = PrincipalUtil.getSubjectX509Principal(cert);
        Vector<String> names = x509Principal.getValues();
        String s = "";
        for(int i=names.size()-1; i>=0; i--){
        	s += names.get(i);
        }
	return s;
    }
/*********颁发者（没有等号）***********/
  
     public static String getIssuerNames(X509Certificate cert) throws CertificateException {
        
    	X509Principal x509Principal = PrincipalUtil.getIssuerX509Principal(cert);
        Vector<String> names = x509Principal.getValues();
        String s = "";
        for(int i=names.size()-1; i>=0; i--){
        	s += names.get(i);
        }
        //System.out.println(s);
	return s;
    }
   
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_chooseCA;
    private javax.swing.JButton jButton_exit;
    private javax.swing.JComboBox<String> jComboBox_type;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_info;
    private javax.swing.JTextField jTextField_CApath;
    private javax.swing.JTextArea jText_detailedInfo;
    private javax.swing.JLabel show;
    // End of variables declaration//GEN-END:variables

    class JTableCellRender1 extends JLabel implements TableCellRenderer {  
  
    @Override  
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) { 
        return (JLabel)value;  
    }  
}
    
}
